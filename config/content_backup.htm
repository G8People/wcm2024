<h1>About</h1>
<p>網頁:<a class="Link--inTextBlock" href="https://g8people.github.io/wcm2024/">https://g8people.github.io/wcm2024/</a><a href="https://g8people.github.io/wcm2024/"></a></p>
<p>網誌:<a href="https://g8people.github.io/wcm2024/blog">https://g8people.github.io/wcm2024/blog </a></p>
<p>簡報: <a href="https://g8people.github.io/wcm2024/reveal">https://g8people.github.io/wcm2024/reveal</a> </p>
<p>倉儲:<a href="https://github.com/G8People/wcm2024">https://github.com/G8People/wcm2024</a></p>
<p>本 cmsimde 網際內容管理系統的對應 Template 倉儲:</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecycu/cmsimde_site">https://github.com/mdecycu/cmsimde_site</a></p>
<p style="padding-left: 30px;">此 Template 將 cmsimde 作為子目錄而非子模組, 使用者可以依照需求自行修改</p>
<p style="padding-left: 30px;">倉儲對應網站: <a href="https://mde.tw/cmsimde_site">https://mde.tw/cmsimde_site</a></p>
<h1>cmsimde</h1>
<p><span style="background-color: #ccffcc;">SMap</span> - SiteMap - 依照階次列出網站的所有頁面.</p>
<p><span style="background-color: #ccffcc;">EditA</span> - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本.</p>
<p><span style="background-color: #ccffcc;">Edit</span> - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式.</p>
<p><span style="background-color: #ccffcc;">Config</span> - Configure Site - 編輯頁面標題與管理者密碼.</p>
<p><span style="background-color: #ccffcc;">Search</span> - 動態頁面內容的關鍵字搜尋.</p>
<p><span style="background-color: #ccffcc;">IUpload</span> - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小.</p>
<p><span style="background-color: #ccffcc;">IList</span> - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案.</p>
<p><span style="background-color: #ccffcc;">FUpload</span> - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改.</p>
<p><span style="background-color: #ccffcc;">FList</span> - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案.</p>
<p><span style="background-color: #ccffcc;">Logout</span> - 登出頁面編輯模式.</p>
<p><span style="background-color: #ccffcc;">Convert</span> - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁.</p>
<p><span style="background-color: #ccffcc;">acp</span> - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲.</p>
<p><span style="background-color: #ccffcc;">SStatic</span> - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容.</p>
<p><span style="background-color: #ccffcc;">RStatic</span> - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站.</p>
<p><span style="background-color: #ccffcc;">80</span> - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80.</p>
<p></p>
<h1>Replit</h1>
<p><a href="https://replit.com">https://replit.com</a></p>
<p>利用 init_replit 指令安裝所需 Python 模組<br/><br/>chmod u+x init_replit<br/><br/>./init_replit</p>
<p dir="auto">On Replit:</p>
<p dir="auto">.replit: python3 main.py</p>
<p dir="auto">chmod u+x cms init_replit</p>
<p dir="auto">./init_replit</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde_site (not needed): git submodule update --init --recursive</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent</p>
<p dir="auto">password generator: <a href="https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py">https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py</a> </p>
<p dir="auto"></p>
<p dir="auto">for IPv6 only Ubuntu:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.com<br/>ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p<br/><br/>for Replit:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.co<br/>#since Replit works for IPv4, therefore no ProxyCommand setting needed<br/>#ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p</p>
<h1>homework</h1>
<h2>W2</h2>
<p>在使用replit 近端或遠端，編輯維護網站，可用新的維護網站Codespaces進行維護</p>
<p>1.可以跳過近端反鎖步驟，直接開啟動態網站編輯。</p>
<p>2.幾乎與replit的操作系統一樣。(和其最近更新的動態網站連結亂碼)</p>
<p>3.受限於這個只是給你試用的，所以有<span>每個月的使用時數上限</span>。</p>
<p>以下連結為使用<span>Codespaces</span>編輯維護晚站後的靜態連結<a href="https://ren911308.github.io/wcm2024/content/index.htm">https://ren911308.github.io/wcm2024/content/index.htm</a></p>
<p></p>
<h2>W3</h2>
<h3>１.ＷＩＮＫ</h3>
<p><a href="https://www.debugmode.com/wink.html">https://www.debugmode.com/wink.html</a></p>
<h3>２.ＧＩＴ　ＯＲＤＥＲ</h3>
<p><span>git add .</span><span> </span>(新增)</p>
<p><span>git commit -m "說明字串"</span>  (提交及名稱)</p>
<p><span>git </span><span>push (推送)</span></p>
<p><span>git version (查詢目前所使用的 git 版本)</span></p>
<p><span>git status (一般是用來檢查目前近端改版情況)</span></p>
<p>若在遠端倉儲已經改版了，就必須先<span>git pull，將遠端資訊與自己的合併更新，才能在提交新的版本推送至倉儲。</span></p>
<p><span>git pull=git fetch + git merge</span></p>
<p><span>git submodule add 倉儲網址子目錄</span></p>
<p><span>git clone --recurse-submodules (.git 指定目錄與否)</span></p>
<p><span>token</span></p>
<p><span>git config --global</span></p>
<p>------------------------</p>
<p>以下為其他其他指令</p>
<p><span>git submodule update --init (抓下子模組)</span></p>
<p><span>git log (檢視 Git 紀錄 Q鍵離開)</span></p>
<p><span>ls -l (瀏覽)</span></p>
<p><span>pwd (列出現在工作目錄)</span></p>
<p><span>acp ("輸入" 直接上傳)</span></p>
<p><span>dns (將英文名稱轉為數字IP 問server(伺服器)IP地址 DNS會先查詢自己資料庫)</span></p>
<p><span>dir (顯示某個磁碟指定目錄下的全部或部分檔案目錄和子目錄)</span></p>
<p><span>./b(代表執行、運行)(執行可執行檔)</span></p>
<h3>３.建立分組倉儲</h3>
<p>利用Codespaces建立分組倉儲建立個人子模組</p>
<p>另用終端機打出指令</p>
<p><span>git status</span></p>
<p><span>ls -l</span></p>
<p><span>clear</span></p>
<p><span>git submodule add 自己倉儲網址.git空格+學號</span></p>
<p><span>git add .</span></p>
<p><span>git commit -m "add 學號 submodule"</span></p>
<p><span>git push</span></p>
<p>就可以將自己的個人子模組加入到分組倉儲</p>
<p></p>
<h2>W4</h2>
<p>有關建立網站:<span>網站指的是 Web site針對網頁瀏覽器檢視的內容加以管理，利用 Github 所提供的 Pages 功能來建立網頁進行管理。</span></p>
<p><span>Replit靜態網站檢視:若要執行動態網站，可以在 Shell 執行 python3 main.py 或者使用 Replit 的 Run 按鍵， Shell 執行 python3 main2.py 就可以執行倉儲內的靜態網站檢視。</span></p>
<p><span>Replit建立分組倉儲權限:</span></p>
<p>分組網站 import 到 Replit, 必須自行在 /home/runner/.ssh 目錄下建立 id_rsa 與 config (id_rsa.pub 必須登錄到 Github 對應帳號), 其中的 config 內容為:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">Host github.com
User git
Hostname github.com</pre>
<div>
<div class="syntaxhighlighter jscript" id="highlighter_355090">ssh.py 程式內容如下:</div>
</div>
<div>
<div class="syntaxhighlighter python" id="highlighter_462850">
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">import os
if not os.path.exists("/home/runner/.ssh"): 
    os.makedirs("/home/runner/.ssh") 
os.system("mv ./downloads/id_rsa.txt /home/runner/.ssh/id_rsa")
os.system("mv ./downloads/config.txt /home/runner/.ssh/config")
os.system("chmod og-rwx /home/runner/.ssh/id_rsa")
</pre>
</div>
</div>
<h2>W5</h2>
<p>以 iframe 嵌入先前的教學影片做課前預習</p>
<p>1.在Replit 平台上的分組倉儲權限設定</p>
<p>2.Putty Solvespace STL 零件檢視方法</p>
<p>3.大規模人工智慧運算的時代：前景、影響及回應</p>
<h2>W6</h2>
<h3>question1</h3>
<h4>(1)</h4>
<div class="flex flex-grow flex-col max-w-full">
<div class="min-h-[20px] text-message flex flex-col items-start gap-3 whitespace-pre-wrap break-words [.text-message+&amp;]:mt-5 overflow-x-auto" data-message-author-role="user" data-message-id="aaa2da3e-e2dc-4704-a2ae-3bd54259198f" dir="auto">
<div class="">假如要在 Windows 實際 demo git client 與 git server, 該如何進行?</div>
</div>
</div>
<p>A:</p>
<p>要在 Windows 上演示 Git 客户端与 Git 服务器，你可以按照以下步骤进行：</p>
<p>**设置 Git 服务器：**</p>
<p>1. **安装 Git：**首先，在你选择的 Windows 服务器上安装 Git。你可以从 Git 官方网站（https://git-scm.com/）下载并安装 Git for Windows。</p>
<p>2. **设置 Git 仓库：**选择一个目录作为 Git 仓库，并通过命令行进入该目录。</p>
<p>3. **初始化仓库：**使用以下命令初始化 Git 仓库：</p>
<p>```<br/> git init --bare<br/> ```</p>
<p>这将在选定目录中创建一个裸仓库，用于作为 Git 服务器。</p>
<p>4. **设置 SSH 访问（可选）：**如果你计划使用 SSH 进行访问和认证，你需要确保在服务器上配置了 SSH 服务，并在客户端生成 SSH 密钥对并将公钥添加到服务器上的授权文件中。</p>
<p>**设置 Git 客户端：**</p>
<p>1. **安装 Git：**在你选择的 Windows 客户端上安装 Git for Windows，同样可以从 Git 官方网站下载并安装。</p>
<p>2. **配置全局用户信息：**在命令行或 Git Bash 中，使用以下命令配置全局用户信息：</p>
<p>```<br/> git config --global user.name "Your Name"<br/> git config --global user.email "your.email@example.com"<br/> ```</p>
<p>这将设置全局的用户名和邮箱，用于在提交时标识作者信息。</p>
<p>3. **克隆仓库：**在你选择的目录中，使用以下命令克隆 Git 服务器上的仓库：</p>
<p>```<br/> git clone username@server_ip:/path/to/repository<br/> ```</p>
<p>其中 `username` 是 Git 服务器的用户名，`server_ip` 是服务器的 IP 地址，`/path/to/repository` 是服务器上仓库的路径。</p>
<p>4. **进行更改：**在克隆的本地仓库中进行更改，并使用以下命令提交更改：</p>
<p>```<br/> git add .<br/> git commit -m "Commit message"<br/> ```</p>
<p>5. **推送更改：**将本地更改推送到 Git 服务器：</p>
<p>```<br/> git push origin master<br/> ```</p>
<p>这将把本地的 `master` 分支推送到远程仓库。</p>
<p>通过以上步骤，你就可以在 Windows 上演示 Git 客户端与 Git 服务器的基本使用。记得根据实际情况进行配置和调整，例如使用 HTTPS 或 SSH 访问，以及确保适当的权限和认证方式。</p>
<h4>(2)</h4>
<p><span>git創作人的相關履歷?</span></p>
<p><span>A:<br/></span></p>
<p>当谈到创作人的履历时，特别是那些与软件开发、写作、设计等相关的创作人，他们在履历中可能会突出以下方面与 Git 相关的内容：</p>
<p>1. **版本控制经验**：在履历中强调对版本控制系统（如 Git）的熟练掌握，包括对分支管理、合并冲突解决、提交历史管理等方面的经验。这展示了创作人对于有效管理和追踪作品变更历史的能力。</p>
<p>2. **项目协作经历**：描述在团队中使用 Git 进行协作的经验。这可以包括与团队成员合作解决问题、审核代码或文档、参与项目管理等方面的经历。突出自己在团队中的贡献，以及如何利用 Git 实现高效的团队协作。</p>
<p>3. **个人项目管理**：展示如何利用 Git 管理个人项目的经验。包括如何组织文件结构、使用分支管理不同功能或版本、定期进行提交和推送等。这表明创作人具备独立开展项目工作并有效管理项目的能力。</p>
<p>4. **技能和工具**：在技能部分提及熟练掌握 Git 及相关工具的经验，如 GitHub、GitLab 等。这表明创作人具备利用现代工具和技术提高工作效率和质量的能力。</p>
<p>5. **开源贡献**：如果有的话，可以提及自己在开源项目中的贡献经历。这可能包括提交代码、修复错误、撰写文档等，展示了创作人对于开源社区的积极参与和贡献精神。</p>
<p>综上所述，创作人的履历中可以通过突出与 Git 相关的经验和技能，展示自己在版本控制、团队协作和项目管理方面的能力，从而提升自己在相关领域的竞争力和可信度。</p>
<h4>(3)</h4>
<p><span>如何用git解決softlatheV5的問題?</span></p>
<p><span>A:</span></p>
<p>要使用 Git 解决 SoftLatheV5（假设这是一个软件项目）的问题，可以遵循以下步骤：</p>
<p>1. **创建 Git 仓库**：首先，在项目目录中初始化一个 Git 仓库。可以使用以下命令：</p>
<p>```<br/> git init<br/> ```</p>
<p>2. **添加文件**：将 SoftLatheV5 项目的文件添加到 Git 仓库中，可以使用以下命令：</p>
<p>```<br/> git add .<br/> ```</p>
<p>这将添加所有文件到暂存区。</p>
<p>3. **提交更改**：一旦添加了文件，就可以将它们提交到仓库中，可以使用以下命令：</p>
<p>```<br/> git commit -m "Initial commit"<br/> ```</p>
<p>这将提交更改并创建一个初始提交。</p>
<p>4. **分支管理**：如果 SoftLatheV5 有多个功能或修复要进行，可以使用分支进行管理。可以使用以下命令创建新分支：</p>
<p>```<br/> git checkout -b new-feature<br/> ```</p>
<p>在新分支上进行开发，完成后再合并回主分支。</p>
<p>5. **远程仓库**：如果需要与团队协作或备份代码，可以将本地仓库连接到远程仓库，例如 GitHub、GitLab 或 Bitbucket。可以使用以下命令添加远程仓库：</p>
<p>```<br/> git remote add origin &lt;remote_repository_URL&gt;<br/> ```</p>
<p>然后将本地更改推送到远程仓库：</p>
<p>```<br/> git push -u origin master<br/> ```</p>
<p>6. **解决冲突**：如果多人同时修改了同一部分代码，可能会发生冲突。在这种情况下，需要解决冲突并合并更改。可以使用 Git 提供的合并工具或手动编辑文件来解决冲突。</p>
<p>7. **版本控制**：使用 Git 可以轻松地回滚到之前的版本，如果某个版本出现问题，可以使用以下命令回滚：</p>
<p>```<br/> git reset --hard &lt;commit_SHA&gt;<br/> ```</p>
<p>其中 `&lt;commit_SHA&gt;` 是要回滚到的提交的哈希值。</p>
<p>通过以上步骤，你可以使用 Git 来管理 SoftLatheV5 项目，并且更加高效地进行开发、协作和问题解决。</p>
<h3>question2</h3>
<h4>(1)</h4>
<div class="flex flex-grow flex-col max-w-full">
<div class="min-h-[20px] text-message flex flex-col items-start gap-3 whitespace-pre-wrap break-words [.text-message+&amp;]:mt-5 overflow-x-auto" data-message-author-role="user" data-message-id="aaa2da3e-e2dc-4704-a2ae-3bd54259198f" dir="auto">
<div class="">假如要在 Windows 實際 demo git client 與 git server, 該如何進行?</div>
</div>
</div>
<div class="mt-1 flex gap-3 empty:hidden juice:justify-end">A:</div>
<div class="mt-1 flex gap-3 empty:hidden juice:justify-end">要在 Windows 上演示 Git 客户端与 Git 服务器，你可以按照以下步骤进行：<br/><br/>**设置 Git 服务器：**<br/><br/>1. **安装 Git：**首先，在你选择的 Windows 服务器上安装 Git。你可以从 Git 官方网站（https://git-scm.com/）下载并安装 Git for Windows。<br/><br/>2. **设置 Git 仓库：**选择一个目录作为 Git 仓库，并通过命令行进入该目录。<br/><br/>3. **初始化仓库：**使用以下命令初始化 Git 仓库：<br/><br/> ```<br/> git init --bare<br/> ```<br/><br/> 这将在选定目录中创建一个裸仓库，用于作为 Git 服务器。<br/><br/>4. **设置 SSH 访问（可选）：**如果你计划使用 SSH 进行访问和认证，你需要确保在服务器上配置了 SSH 服务，并在客户端生成 SSH 密钥对并将公钥添加到服务器上的授权文件中。<br/><br/>**设置 Git 客户端：**<br/><br/>1. **安装 Git：**在你选择的 Windows 客户端上安装 Git for Windows，同样可以从 Git 官方网站下载并安装。<br/><br/>2. **配置全局用户信息：**在命令行或 Git Bash 中，使用以下命令配置全局用户信息：<br/><br/> ```<br/> git config --global user.name "Your Name"<br/> git config --global user.email "your.email@example.com"<br/> ```<br/><br/> 这将设置全局的用户名和邮箱，用于在提交时标识作者信息。<br/><br/>3. **克隆仓库：**在你选择的目录中，使用以下命令克隆 Git 服务器上的仓库：<br/><br/> ```<br/> git clone username@server_ip:/path/to/repository<br/> ```<br/><br/> 其中 `username` 是 Git 服务器的用户名，`server_ip` 是服务器的 IP 地址，`/path/to/repository` 是服务器上仓库的路径。<br/><br/>4. **进行更改：**在克隆的本地仓库中进行更改，并使用以下命令提交更改：<br/><br/> ```<br/> git add .<br/> git commit -m "Commit message"<br/> ```<br/><br/>5. **推送更改：**将本地更改推送到 Git 服务器：<br/><br/> ```<br/> git push origin master<br/> ```<br/><br/> 这将把本地的 `master` 分支推送到远程仓库。<br/><br/>通过以上步骤，你就可以在 Windows 上演示 Git 客户端与 Git 服务器的基本使用。记得根据实际情况进行配置和调整，例如使用 HTTPS 或 SSH 访问，以及确保适当的权限和认证方式。</div>
<h2>W7-W8</h2>
<p>期中成績登記，並輸入自己想要的理想分數。</p>
<p>第八週上課內容</p>
<p>1.了解教育的本質、意義</p>
<p>2.如何把影片嵌入自己的個人網站上</p>
<h2>W10</h2>
<p>在mdewcm2024/1astud-site新增各組的心得，並解決衝突的問題</p>
<p>並使用超文件到網誌中</p>
<p>介紹acp的功用</p>
<p><span>git add .</span></p>
<p><span>git commit -m "$1" --author="$2"</span></p>
<p><span>git push</span></p>
<h2>W11</h2>
<p>面 demo 在同一頁面下入多個線上 Ace 編輯器與執行按鈕 (<a href="/get_page/W11/practice_html.txt">practice_html.txt</a>動態頁面超文件).</p>
<p><a href="/get_page/W11/practice_html.txt">practice_html.txt</a>動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為<span> </span><a href="/get_page/W11/class">class</a><span> </span>後, 在範例導入時透過<span> </span><a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a><span> </span>引用</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p><span> </span></p>
<h2>W13</h2>
<p>利用<a href="https://mde.tw/wcm2024/downloads/wsgi_v2_py.txt">wsgi_v2_py</a>擷取個學期的課表</p>
<p>一年級上學期的課表</p>
<p>將上方的連結下載後放入可攜，儲存後放入cmd</p>
<p>要先確認是否有flask和flask-cors</p>
<p>輸入</p>
<p><span>pip list</span></p>
<p><span>如果有就可執行下面內容<br/></span></p>
<p><span>cd tmp</span></p>
<p><span>python wsgi_v2.py</span></p>
<p>即可開啟班級課表</p>
<p><img alt="" height="254" src="https://ren911308.github.io/wcm2024/images/%E8%9E%A2%E5%B9%95%E6%93%B7%E5%8F%96%E7%95%AB%E9%9D%A2%202024-05-16%20161734.png" width="500"/></p>
<p><span>112年第1學期課表</span></p>
<p><span><img alt="" height="56" src="https://ren911308.github.io/wcm2024/images/%E8%9E%A2%E5%B9%95%E6%93%B7%E5%8F%96%E7%95%AB%E9%9D%A2%202024-05-16%20161817.png" width="500"/></span></p>
<p><span><img alt="" height="471" src="https://ren911308.github.io/wcm2024/images/%E8%9E%A2%E5%B9%95%E6%93%B7%E5%8F%96%E7%95%AB%E9%9D%A2%202024-05-16%20161930.png" width="500"/></span></p>
<p><span>112年第2學期課表</span><span><img alt="" height="43" src="https://ren911308.github.io/wcm2024/images/%E8%9E%A2%E5%B9%95%E6%93%B7%E5%8F%96%E7%95%AB%E9%9D%A2%202024-05-16%20161741.png" width="500"/></span><span><img alt="" height="460" src="https://ren911308.github.io/wcm2024/images/%E8%9E%A2%E5%B9%95%E6%93%B7%E5%8F%96%E7%95%AB%E9%9D%A2%202024-05-16%20161801.png" width="500"/></span></p>
<h1>期中作業</h1>
<h2>網頁式內容管理</h2>
<p>Q1:如何建立 Github 上的網站?Q2:如何管理內容?Q3: 如何建立章節式網站?Q4:能放入甚麼多媒體內容?Q5:靜態圖文?Q6:動態圖文?Q7:線上遊戲?Q8:3D 零組件展示?Q9:如何建立網頁系統中的網誌?Q10:如何建立網頁系統中的簡報?</p>
<p>A1:<span> GitHub 上建立網站可以使用 GitHub Pages ，先創立一個儲存庫，名稱為username.github.io，在存儲庫中創建一個名為「index.html」的 HTML 文件，用於構建你的網站主頁。將網站的代碼添加到 index.html 文件中，然後把它推到 GitHub 存儲庫。</span></p>
<p><span>A2: GitHub 上管理網站內容通常使用版本控制工具 Git。可以在本地創建一個 Git 存儲庫，將網站代碼下載到本地，然後在本地修改和更新網站內容。完成修改後，使用 Git 將更改推送到 GitHub 存儲庫。另外，可以使用分支（Branches）來開發新功能或進行實驗，然後將分支合併（Merge）到主分支（通常是 master 或 main）中。</span></p>
<p><span>A3:建立章節式網站可以使用靜態網站生成器，如Replit、Codespaces或Gitpods等。首先，需要選擇一個適合你需求的生成器，然後在本地開發環境中創建你的網站再使用生成器提供的模板和功能來創建不同的章節和內容頁面，組織你的網站內容。完成編輯後，使用生成器將網站生成為靜態文件，然後將這些文件推送到GitHub存儲庫中。最後，你的章節式網站將通過GitHub Pages或其他靜態網站托管服務進行部署，讓其他人可以訪問和瀏覽你的網站。</span></p>
<p><span>A4:</span></p>
<p><span>1.圖片:嵌入YouTube、Vimeo等視頻平台提供的影片連結，或者將視頻文件直接嵌入到網頁中，讓讀者可以觀看視頻內容。</span></p>
<p><span>2.影片:嵌入YouTube、Vimeo等視頻平台提供的影片連結，或者將視頻文件直接嵌入到網頁中，讓讀者可以觀看視頻內容。</span></p>
<p>3.音頻:<span>嵌入音樂或語音文件，如Podcast等，讓讀者可以聆聽音頻內容。</span></p>
<p><span>4.地圖:嵌入地圖服務，如Google Maps，以展示地理位置或路線信息。</span></p>
<p><span>5.表格:使用HTML或Markdown格式來創建和展示表格內容，以整理和呈現數據。</span></p>
<p><span>6.圖表和圖形:使用JavaScript圖表庫或其他數據可視化工具來創建和展示圖表和圖形，以呈現數據和統計信息。</span></p>
<p><span>7.放入網站:嵌入其他網站提供的媒體內容，如Twitter貼文、Instagram照片等，以擴展你的內容範圍。</span></p>
<p><span>A5:</span></p>
<p><span>1.圖片:將圖片文件直接插入到章節內容中。你可以使用HTML的 <code>&lt;img&gt;</code> 標籤或Markdown的圖片語法（例如 <code>![圖片描述](圖片URL)</code>）來添加圖片。</span></p>
<p><span>2.文本:使用Markdown或HTML來編寫文本內容，包括標題、段落、列表等。Markdown提供了簡單易讀的語法，而HTML則提供更多的自定義和控制。</span></p>
<p><span>3.超連結:使用超連結來連接不同章節或其他網站。在HTML中，你可以使用 <code>&lt;a&gt;</code> 標籤來創建超連結，而Markdown則提供了 <code>[連結文字](連結URL)</code> 的語法。</span></p>
<p><span>4.引用:引用其他資料或文字也是常見的做法。你可以使用Markdown的引用語法（<code>&gt; 引用文字</code>）或HTML的 <code>&lt;blockquote&gt;</code> 標籤來添加引用內容。</span></p>
<p><span>A6:</span></p>
<p><span>1.動畫:使用CSS或JavaScript來創建和控制動畫效果，使圖片、文本或其他元素呈現動態效果。你可以使用CSS的 <code>@keyframes</code> 樣式或JavaScript的動畫庫（如Animate.css）來添加動畫。</span></p>
<p><span>2.交互式元素:加入JavaScript互動元素，例如按鈕、滑塊、表單等，讓用戶可以與你的網站互動。這些元素可以通過事件監聽器來實現動態效果，例如點擊按鈕後顯示或隱藏特定內容。</span></p>
<p><span>3.即時更新:用JavaScript或AJAX來實現即時更新功能，例如在不刷新整個頁面的情況下加載新的內容或更新現有內容。這可以通過向後端API發送請求並處理返回的數據來實現。</span></p>
<p><span>4.影片和音頻播放器:嵌入視頻和音頻播放器，讓用戶可以播放多媒體內容。你可以使用HTML5的 <code>&lt;video&gt;</code> 和 <code>&lt;audio&gt;</code> 標籤來添加視頻和音頻播放器，並使用JavaScript控制播放器的功能。</span></p>
<p><span>5.即時更新圖表:使用JavaScript圖表庫（如Chart.js、D3.js等）來創建動態圖表，並實現即時更新功能，使圖表可以根據用戶操作或數據變化而動態更新。</span></p>
<p><span>A7:</span></p>
<p><span>1.使用嵌入式代碼:將線上遊戲的嵌入代碼（embed code）添加到你的網站中。許多線上遊戲提供了嵌入代碼，你只需將其添加到網站的HTML中的相應位置即可。</span></p>
<p><span>2.使用iframe元素:使用HTML的 <code>&lt;iframe&gt;</code> 元素來嵌入線上遊戲。你可以將遊戲的URL添加到 <code>&lt;iframe&gt;</code> 元素的 <code>src</code> 屬性中，然後將 <code>&lt;iframe&gt;</code> 元素添加到你的網站中的任何位置。</span></p>
<p><span>補充:</span><code>&lt;iframe&gt;</code><span> </span>元素是HTML中的一個標記，用於在網頁中嵌入另一個獨立的HTML文檔或外部網頁。它提供了一種在當前網頁中包含其他網頁內容的方法，讓你可以將其他網站的內容嵌入到網頁中，或者在同一網站中的不同頁面之間嵌入內容。</p>
<p><code>&lt;iframe&gt;</code><span> </span>元素有一個<span> </span><code>src</code><span> </span>屬性，用於指定要嵌入的外部文檔或網頁的URL。除此之外，還可以設置其他屬性來調整iframe的大小、邊框、樣式等。通過iframe，你可以在網頁中創建內嵌的互動元素，如Google地圖、YouTube視頻、線上遊戲等，為網站提供更豐富的內容和功能。</p>
<p><span>3.設置遊戲頁面:在網站中創建一個專門的遊戲頁面，將遊戲嵌入到該頁面中。這樣做可以使遊戲與網站的其他內容分開，並為用戶提供更好的遊戲體驗。</span></p>
<p><span>4.安全性:確保嵌入的遊戲代碼來源可信，以防止可能的安全風險。如果可能的話，最好使用來自可靠和信任的遊戲提供商的嵌入代碼。</span></p>
<p><span>A8:</span></p>
<p><span>1.使用Javascript 3D庫:使用像Three.js這樣的JavaScript 3D庫，可以輕鬆在網站中展示3D零組件。你可以將3D模型導入到你的網站中，並使用Three.js等庫來渲染和顯示它們。這樣的庫通常提供了各種功能，如照明、動畫、交互等，以增強3D模型的表現力。</span></p>
<p><span>2.使用網頁GL視窗:利用WebGL技術，你可以在網頁中嵌入可交互的3D場景。這需要一些較高級的編程知識，但它可以讓你在網頁中直接渲染3D模型，使它們能夠與用戶互動。</span></p>
<p><span>3.嵌入式3D查看器:使用嵌入式3D查看器，如Sketchfab，可以將3D模型嵌入到你的網站中。Sketchfab提供了一個簡單的嵌入代碼，你可以將它添加到你的網站中，以便在線上展示和互動3D模型。</span></p>
<p><span>A9:步驟</span></p>
<p><span>1.選擇網誌平台</span></p>
<p><span>2.設置網誌</span></p>
<p><span>3.編輯內容</span></p>
<p><span>4.發布文章</span></p>
<p><span>5.促進網誌</span></p>
<p><span>6.定期更新</span></p>
<p><span>A10:步驟</span></p>
<p><span>1.選擇簡報工具</span></p>
<p><span>2.建立簡報</span></p>
<p><span>3.增加內容</span></p>
<p><span>4.設置轉場效果</span></p>
<p><span>5.編輯和分享</span></p>
<p><span>6.儲存</span></p><h2>Python 程式系統</h2>
<p>學習議題: 如何利用電腦輔助設計室的舊 Python 建立新的可攜環境? 在網頁中置入 Python 語法的程式加上對 Javascript 與超文件語法的了解後, 能夠應用在那些領域? (精密)機械設計流程? 設計運算? 特定系統模擬?</p>
<div class="w-full pt-2 md:pt-0 dark:border-white/20 md:border-transparent md:dark:border-transparent md:w-[calc(100%-.5rem)]"><form class="stretch mx-2 flex flex-row gap-3 last:mb-2 md:mx-4 md:last:mb-6 lg:mx-auto lg:max-w-2xl xl:max-w-3xl">
<div class="relative flex h-full flex-1 flex-col"></div>
</form></div><h2>網頁上的 IDE</h2>
<h2>AI 工具</h2>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>